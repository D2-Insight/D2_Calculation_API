from typing import Any, Optional, Self, Union# type: ignore
from enum import Enum



class WeaponInterface:
    class Trait:
        def __init__(self, _stat_buffs: dict[int, int], _enhanced: bool, _value: int, _hash: int): ...
        def __new__(cls: type[Self]) -> Self: ...
        def __repr__(self) -> str: ...
        @staticmethod
        def default() -> WeaponInterface.Trait: ...


    class HandlingResponse:
        @property
        def ready_time(self) -> float: ...
        @property
        def stow_time(self) -> float: ...
        @property
        def ads_time(self) -> float: ...
        def __repr__(self) -> str: ...

    class RangeResponse:
        @property
        def hip_falloff_start(self) -> float: ...
        @property
        def hip_falloff_end(self) -> float: ...
        @property
        def ads_falloff_start(self) -> float: ...
        @property
        def ads_falloff_end(self) -> float: ...
        @property
        def floor_percent(self) -> float: ...
        def __repr__(self) -> str: ...

    class DpsResponse:
        @property
        def dps_per_mag(self) -> list[float]: ...
        @property
        def time_damage_data(self) -> list[tuple[float, float]]: ...
        @property
        def time_dps_data(self) -> list[tuple[float, float]]: ...
        @property
        def total_damage(self) -> float: ...
        @property
        def total_time(self) -> float: ...
        @property
        def total_shots(self) -> int: ...
        def over_time_span(self, _start: float, _end: float) -> tuple[float, float]: ...
        def __repr__(self) -> str: ...

    class FiringResponse:
        @property
        def pvp_impact_damage(self) -> float: ...
        @property
        def pvp_explosion_damage(self) -> float: ...
        @property
        def pvp_crit_mult(self) -> float: ...
        @property
        def pve_impact_damage(self) -> float: ...
        @property
        def pve_explosion_damage(self) -> float: ...
        @property
        def pve_crit_mult(self) -> float: ...
        @property
        def burst_delay(self) -> float: ...
        @property
        def burst_duration(self) -> float: ...
        @property
        def burst_size(self) -> int: ...
        @property
        def rpm(self) -> float: ...
        def __repr__(self) -> str: ...

    class OptimalKillData:
        @property
        def headshots(self) -> int: ...
        @property
        def bodyshots(self) -> int: ...
        @property
        def time_taken(self) -> float: ...
        @property
        def achievable_range(self) -> float: ...
        def __repr__(self) -> str: ...

    class BodyKillData:
        @property
        def bodyshots(self) -> int: ...
        @property
        def time_taken(self) -> float: ...
        def __repr__(self) -> str: ...

    class ResillienceSummary:
        @property
        def value(self) -> int: ...
        @property
        def body_ttk(self) -> WeaponInterface.BodyKillData: ...
        @property
        def optimal_ttk(self) -> WeaponInterface.OptimalKillData: ...
        def __repr__(self) -> str: ...

    @staticmethod
    def set_weapon(_hash: int, _weapon_type_id: int, _intrinsic_hash: int, _ammo_type_id: int, _damage_type_id: int) -> None: ...
    @staticmethod
    def get_weapon_hash() -> bool: ...
    @staticmethod
    def stringify_weapon() -> str: ...
    @staticmethod
    def get_range_falloff(_use_traits: bool) -> WeaponInterface.RangeResponse: ...
    @staticmethod
    def get_handling_times(_use_traits: bool) -> WeaponInterface.HandlingResponse: ...
    @staticmethod
    def add_trait(_trait: Trait) -> None: ...
    @staticmethod
    def remove_trait(_trait: int) -> None: ...
    @staticmethod
    def get_dps(_do_rpl_mult: bool) -> WeaponInterface.DpsResponse: ...
    @staticmethod
    def get_ttk(_overshield: float) -> list[ResillienceSummary]: ...
    @staticmethod
    def set_stats(_stats: dict[int, int]) -> None: ...
    @staticmethod
    def get_firing_data(_use_traits: bool, _use_rpl: bool) -> WeaponInterface.FiringResponse: ...

class ActivityInterface:
    class DifficultyOptions(Enum):
        NORMAL = 1,
        RAID = 2,
        MASTER = 3,

    class PlayerClass(Enum):
        UNKNOW = 0,
        Titan = 1,
        Hunter = 2,
        Warlock = 3,

    class Activity:
        def __init__(self, _name: str, _difficulty: ActivityInterface.DifficultyOptions, _rpl: int, _cap: int): ...
        def __new__(cls: type[Self]) -> Self: ...
        def __repr__(self) -> str: ...

    class Player:
        def __init__(self, _power_level: int, _class: ActivityInterface.PlayerClass): ...
        def __new__(cls: type[Self]) -> Self: ...
        def __repr__(self) -> str: ...

    @staticmethod
    def set_activity(_activity: Activity) -> None: ...
    @staticmethod
    def set_player(_player: Player) -> None: ...
    @staticmethod
    def get_activity() -> ActivityInterface.Activity: ...
    @staticmethod
    def get_player() -> ActivityInterface.Player: ...

class EnemyInterface:
    class EnemyType(Enum):
        MINOR = 1,
        ELITE = 2,
        MINIBOSS = 3,
        BOSS = 4,
        VEHICLE = 5,
        ENCLAVE = 6,
        PLAYER = 7,
        CHAMPION = 8,

    class Enemy:
        def __init__(self, _health: float, _damage: float, _damage_resistance: float, _type: EnemyInterface.EnemyType, _tier: int): ...
        def __new__(cls: type[Self]) -> Self: ...
        def __repr__(self) -> str: ...

    @staticmethod
    def get_enemy() -> EnemyInterface.Enemy: ...
    @staticmethod
    def set_enemy(_enemy: Enemy) -> None: ...
    @staticmethod
    def set_enemy_type(_type: EnemyType) -> None: ...
